{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":" "},{"kind":"internalParam","text":"encoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"encoder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The encoder to encode with."}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/open_jellycore\/quantumvalue\/encode(to:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/encode(to:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An encoder to encode the internal "},{"type":"codeVoice","code":"value"},{"type":"text","text":" into an encodable type."},{"type":"text","text":" "},{"type":"text","text":"Finds the type of the internal value by doing consecutive if let statements until one properly encodes."}],"kind":"symbol","metadata":{"role":"symbol","title":"encode(to:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"symbolKind":"method","externalID":"s:14Open_Jellycore12QuantumValueV6encode2toys7Encoder_p_tKF","extendedModule":"Open_Jellycore","modules":[{"name":"Open-Jellycore"}]},"hierarchy":{"paths":[["doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore","doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue","doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/Encodable-Implementations"]]},"references":{"doc://Open-Jellycore/documentation/Open_Jellycore/QuantumValue/Encodable-Implementations":{"role":"collectionGroup","title":"Encodable Implementations","abstract":[],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/Encodable-Implementations","kind":"article","type":"topic","url":"\/documentation\/open_jellycore\/quantumvalue\/encodable-implementations"},"doc://Open-Jellycore/documentation/Open_Jellycore/QuantumValue/encode(to:)":{"role":"symbol","title":"encode(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"An encoder to encode the internal "},{"type":"codeVoice","code":"value"},{"type":"text","text":" into an encodable type."},{"type":"text","text":" "},{"type":"text","text":"Finds the type of the internal value by doing consecutive if let statements until one properly encodes."}],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/encode(to:)","kind":"symbol","type":"topic","url":"\/documentation\/open_jellycore\/quantumvalue\/encode(to:)"},"doc://Open-Jellycore/documentation/Open_Jellycore":{"role":"collection","title":"Open-Jellycore","abstract":[],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore","kind":"symbol","type":"topic","url":"\/documentation\/open_jellycore"},"doc://Open-Jellycore/documentation/Open_Jellycore/QuantumValue":{"role":"symbol","title":"QuantumValue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"QuantumValue"}],"abstract":[{"type":"text","text":"A custom class with the purpose  of allowing a swift "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" value to be encoded and decoded. Extremely useful for encoding PLISTs and used all across Jellycore"}],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"QuantumValue"}],"url":"\/documentation\/open_jellycore\/quantumvalue"}}}