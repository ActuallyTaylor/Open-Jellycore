{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":" "},{"kind":"internalParam","text":"decoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"decoder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The decoder to decode with"}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/open_jellycore\/quantumvalue\/init(from:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/init(from:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Initializes a QuantumValue from a decoder."},{"type":"text","text":" "},{"type":"text","text":"The value is decoded based on what it can possibly decode by doing consecutive if let statements to find the matching type."}],"kind":"symbol","metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"title":"init(from:)","roleHeading":"Initializer","role":"symbol","symbolKind":"init","externalID":"s:14Open_Jellycore12QuantumValueV4fromACs7Decoder_p_tKcfc","modules":[{"name":"Open-Jellycore"}]},"hierarchy":{"paths":[["doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore","doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue"]]},"references":{"doc://Open-Jellycore/documentation/Open_Jellycore":{"role":"collection","title":"Open-Jellycore","abstract":[],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore","kind":"symbol","type":"topic","url":"\/documentation\/open_jellycore"},"doc://Open-Jellycore/documentation/Open_Jellycore/QuantumValue/init(from:)":{"role":"symbol","title":"init(from:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Initializes a QuantumValue from a decoder."},{"type":"text","text":" "},{"type":"text","text":"The value is decoded based on what it can possibly decode by doing consecutive if let statements to find the matching type."}],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue\/init(from:)","kind":"symbol","type":"topic","url":"\/documentation\/open_jellycore\/quantumvalue\/init(from:)"},"doc://Open-Jellycore/documentation/Open_Jellycore/QuantumValue":{"role":"symbol","title":"QuantumValue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"QuantumValue"}],"abstract":[{"type":"text","text":"A custom class with the purpose  of allowing a swift "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" value to be encoded and decoded. Extremely useful for encoding PLISTs and used all across Jellycore"}],"identifier":"doc:\/\/Open-Jellycore\/documentation\/Open_Jellycore\/QuantumValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"QuantumValue"}],"url":"\/documentation\/open_jellycore\/quantumvalue"}}}